"Group (Malavolta, 2020)","ID (Malavolta, 2020)","Guideline (Malavolta, 2020)","Software Quality (Malavolta, 2020)","Usefulness (Malavolta, 2020)","Relevant to MRS","Favors?","Relevant to MRS Mission Management","Supported","Design Decisions","Location","Skill Specific / Core","Rationale and Assumptions"
"B","B1","The behavior of each node should follow a well-defined lifecyle, which should be queryable and updatable at run-time","Reliability,Maintainability,Portability","50","Yes","Favors","Yes","Yes","DD. 6","https://lesunb.github.io/hmrs_mission_control/modules/skill_implementation.html","Core","MissionControl relies on ROS2 and pytrees for dealing with skills. Such frameworks provide well-defined lifecycle, queryable and updatable nodes by design."
"C","C1","Use standard ROS message formats as much as possible, possibly supporting also their legacy versions","Maintainability,Compatibility,Portability","71","Yes","Neutral","No","-","DD. 6","-","Skill Specific","There are no ROS messages being exchanged within the main architectural components. "
"C","C5","Nodes that potentially produce/consume large amounts of messages should be configurable in terms of their publish/subscribe rates","Performance,Maintainability,Reliability","55","Yes","Neutral","No","-","DD. 6","-","Skill Specific","The components from our architecture do not operate in high rate. Such high frequency can be observed in certain skill implementations."
"C","C8","Take into account that the data exchanged between nodes of the system may not be fully compatible (semantically), incorrect, out-of-order, or redundant","Compatibility,Reliability","42","Yes","Neutral","No","-","-","-","Skill Specific","This item refers to problems in the interface between integrated components. As MissionControl does not know about the skill impementations, it can not put strategies in place for handling semantic failures. We left for the integrator to provide this."
"C","C2","ROS nodes should be agnostic of the underlying communication mechanisms (e.g., network protocols, deployment topology, etc.)","Maintainability,Portability","63","Yes","Neutral","Yes","Yes","DD. 2","Fig. 7 (DEECo)","Core","The ensemble layer makes the system independent of topology or addresses, i.e., the coordinator and robots discovers each other dynamically at runtime. We do not have os-level socket or shared memory. We always use ros pub/sub. We do not make such assumptions. We can deploy either locally or remotely without changing the architecture."
"H","H1","Nodes interacting with simulation or physical platforms should implement identical ROS messaging interfaces","Portability","72","Yes","Neutral","No","-","DD. 6","https://lesunb.github.io/hmrs_mission_control/modules/skill_implementation.html","Skill Specific","There is an interfacing layer separating the proposed architecture and the actual execution/simulation. How this layer is implemented is a responsability from the roboticists using."
"H","H2","Design ROS nodes to be as hardware-independent as possible","Maintainability,Portability,Compatibility","69","Yes","Neutral","No","-","DD. 6 ","https://lesunb.github.io/hmrs_mission_control/modules/skill_implementation.html","Skill Specific","There is an interfacing layer separating the proposed architecture including hardware specifications."
"H","H4","The interface of nodes responsible for state estimation should (i) support an arbitrary number and different types of sensors and (ii) be able to combine the information provided by the sensors","Compatibility","50","Yes","Neutral","No","-","-","-","Skill Specific","State estimation is skill specific."
"I","I3","Expose a single ROS node with interfaces for third-party users for the most common use cases","Usability,Maintainability","61","No","-","No","-","-","-","Skill Specific","Its a useful guideline for third-party developers providing reusable components. In this evaluation we are taking the view point of (a) the MissionControl implementation, and (b) users integrating components into a system. "
"I","I6","Logging usage should be standardized across the project and follow well-defined guidelines.","Maintainability","-","Yes","Neutral","Yes","No","-","-","Skill Specific","The needs for logging are strongly related to the end application, which MissionControl is agnostic about.  In future versions we will (a) define a standard for logging within the MissionControl core, (b) create guidelines for logging in order to be followed by skill implementers to facilitate reuse of skills. "
"I","I1","Assign meaningful names to components (e.g., nodes, topics, messages, services) and group them by adopting standard prefixes/suffixes","Maintainability,Usability","71","Yes","Neutral","Yes","Yes","-","https://lesunb.github.io/hmrs_mission_control/modules/skill_implementation.html","Core","MissionControl activates one node at a time (active skill) an it has the name MC_ACTIVE_SKILL_{TASK_NAME} which is meaninful in the domain."
"I","I2","When possible, core algorithms, libraries, and other generic software components should be ROS-agnostic","Portability,Maintainability","68","Yes","Favors","Yes","Yes","DD. 6, 7","skill_engine.py","Core","The sequencing component is the one and only interface with ROS nodes, enabling ROS-agnostic implementation of mission coordinators."
"I","I5","Identify variation points of the system in advance, and design the system so that it can be extended by third-party users without modifying its core nodes","Maintainability","59","Yes","Favors","Yes","Yes","DD. 3,5,6","Fig 3 Overview","Core","We foreseen variations in skills, missions and the envrionment. Based on these variations the mission control architecture provides mechanisms for integrating new components. Skill descriptor,Environment descriptor,Skill implementation"
"N","N9","Keep the number of nodes as low as possible to support the basic execution scenarios and then extend the architecture for managing corner cases","Maintainability","-","Yes","Neutral","No","-","DD 6.","skill_engine.py","Skill Specific","MissionControl contains only active skill as a ROS node."
"N","N1","Group nodes and interfaces into cohesive sets, each of them with its own responsibilities and well-defined dependencies","Maintainability,Portability","63","Yes","Favors","Yes","Yes","DD. 6","Fig 3.  Overview","Skill Specific","MissionControl breaks the coordination in cohesive sets of functionality i.e., knowlege exchanges with coordinator, sequencing and activation of skill. It also favors the end-user application be broken in cohesive sets by using a skill based architecture."
"P","P3","Use a dedicated node for persisting and querying long-term data and short-term data (e.g., in the order of seconds)","Maintainability,Performance","32","Yes","Favors","Yes","No","DD. 1,5","Fig 4. Database ","Skill Specific","In MissionControl we offload the long-term persistence for predictive evaluation to the environment and skill descriptors, which executes in the coordinator. This strategy creates an independence between how the data is obtained,  persisted and used. With this strategy we expect to favors integrability and modifiability"
,,,,,,,,,,,,
,,"Labels (Malavolta, 2020)","Definitions (Malavolta, 2020)",,,,,,,,,
,,"N","Node responsibilities",,,,,,,,,
,,"C","Network and Communications",,,,,,,,,
,,"H","Interaction with hardware, drivers, sensors, and other lower-level entities",,,,,,,,,
,,"I","Interface to external users and developers",,,,,,,,,
,,"P","Data persistence",,,,,,,,,
,,"B","Internal node behavior",,,,,,,,,
,,"S","Safety-critical concerns",,,,,,,,,
,,"Misc","Miscellaneous",,,,,,,,,
,,"S","Safety-critical concerns",,,,,,,,,
,,"Misc","Miscellaneous",,,,,,,,,
