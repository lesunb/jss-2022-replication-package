ID;Tactics Group;Tactics Question;Supported?;Design Decisions;Locations;Rationale and Assumptions;Recomendations;;;;;;;;;;;;;;;;;;;
IT.01;Limit Dependencies;Does the system encapsulate functionality of each element by introducing explicit interfaces and requiring that all access to the elements passes through these interfaces?;Yes;DD.5, DD.6;Interface of Environment Description, Skill Descriptors and Skill Implementations;In order to support integrating components of thirdpary we defined three types of components Environment Description, Skill Descriptors and Skill Implementations, and provided a single interface for each of these components which they must implement in order integrate the component in the architecture.;;;;;;;;;;;;;;;;;;;;
IT.02;Limit Dependencies;Does the system broadly use intermediaries for breaking dependencies between components—for example, removing a data producer’s knowledge of its consum;Yes;DD.2, DD.5, DD.6;SkillLibrary (execution module), SkillDescriptorRegister (coordination module);The SkillLibrary (in execution module ) is an intermediary that allows the sequencing process to not depend on a specific set of skills, allowing new skills implementations to be added.  The SkillDescriptorRegister is an intermediary that creates independency between the coordinator and the active set of skills at the coordination side, allowing the mission control runtime be independent of the set of skills.;Coordinator / Robots  Ensemble Runtime intermediate the communication bettwen coordinate and robots. (i) Within Coordinator: Lookup process for skill descriptions.  (ii) Within Robot: Library of skill implementations;;;;;;;;;;;;;;;;;;;
IT.03;Limit Dependencies;Does the system abstract common services, providing a general, abstract interface for similar services?;Yes;DD.5, DD.6;Skill Descriptor interface, Skill Implementation interface;Skills implementation and descriptions are called though and abstract interface passing as arguments parameters for the tasks to be realized.;Coordinator:Skill descriptions, Environment Description interfaces servicers are an abstract interface for skill descriptions and environment descriptions.Robot: Skill implementation interface ;;;;;;;;;;;;;;;;;;;
IT.04;Limit Dependencies;Does the system provide a means to restrict communication paths between components?;Yes;DD.3, DD.5, DD.6;Skill Descriptor interfaceSkill Implementation interface; The comunication with the mission planning is restricted to a service interface where the mission planner calls the mission control passing the mission to be coordinated.By separating the MissionControl Runtime and compont model, we restrict the communication to the calls made through the interface.;;;;;;;;;;;;;;;;;;;;
IT.05;Limit Dependencies;Does the system adhere to standards in terms of how components interact and share information with each other?;Yes;DD.2, DD.3, DD.5, DD.6;Overall Architecture;Ideally the interfaces of the system would implement standards provided by standarization organizations such as ISO. However, such standard does not currently exist. May the standars exist in the future, MissionControl can be adapted to comply with. Furthermore, whenever possible, we tried to base the architecture in widespread tecnologies such as ROS, Behavior Trees, HTN planners, Ensemble based systems.In special, the provided lifecycle for skill implementations based on behavior trees that are popular in robotics. And based the service to integrate with task decomposition in HTN, that is a popular method for mission planning.;;;;;;;;;;;;;;;;;;;;
IT.06;Adapt;Does the system provide the ability to statically (i.e., at compile time) tailor interfaces—that is, the ability to add or hide capabilities of a component’s interface without changing its API or implementat;Partially;;Dependency Injection in the init_script; In MissionControl there is no compile time phase as we use only interpret languages and there is no mechanism in place specifically dedicated to tailoring interfaces. However, the use of Dependency Injection allows for the introduction of wrapper into the wiring of components with minimal effort, which would allow for tailoring interfaces in some cases.;During our analysis we could not identify a proper example as this particualr tactic could be required in our context;;;;;;;;;;;;;;;;;;;
IT.07;Adapt;Does the system provide a discovery service, cataloguing and disseminating information about services?;Yes;DD.2; ensemble layer;User can discover the coordinator, and Robots and Coordinators can discover each other through the ensemble layer.;deeco_integration module;;;;;;;;;;;;;;;;;;;
IT.08;Adapt;Does the system provide a means to configure the behavior of components at build, initialization, or runtime?;Yes;DD.3, DD.5, DD.6; task parameters on the mission request,  robot properties, paraters of the task for the Skill Implementation;Skills are configured as planned during task assignment. Dependency Injection allows the components be configures when they are created. Properties of robots are configures at initalization;Document the parameter service;;;;;;;;;;;;;;;;;;;
IT.09;Coordinate;Does the system include an orchestration mechanism that coordinates and manages the invocation of components so they can remain unaware of each other;Yes;DD.4, DD.5, DD.6;estimating module, sequencing in the executing module;The orchestration is guided by the iHTN mission plan, that specifies the sequence of tasks to be executed. (i)Coordinator: Based on the iHTN, the system orchestrates the skill descriptors in order to obtain estimates and assign tasks. The mission is estimated by calling the estimators for each task and each compatible robot. The skill descriptors are independent between them. And the Mission control is not dependent on specific skill descriptors, but in the abstract interface.(ii)Robot: Sequencing process orchestracte the activation of skills. Skills are unaffected by each other. ;;;;;;;;;;;;;;;;;;;;
IT.10;Coordinate;Does the system provide a resource manager that governs access to computing resources?;Partially;DD.4;estimating module / coalition formation process;Through skill descritpors, the system forwards plan for battery, selecting a robot that has sufficient battery accourding to estimates. However, no resource management is enforced during the executing of tasks by a skill implementation. In a future version, the runtime could supervise the skill implementations according to available resources (e.g., if the robot is short on battery, the robot could slow down).;;;;;;;;;;;;;;;;;;;;