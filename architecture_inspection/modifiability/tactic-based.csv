ID;Tactics Group;Tactics Question;Supported? (Y/N);Risk?;Design Decisions; Locations;Rationale and Assumptions;Evidences;;;;;;;;;;;;;;;;;;;
MT.01;Increase Cohesion;Do you make modules more cohesive by splitting the module? For example, if you have a large, complex module, can you split it into two (or more) more cohesive modules?;Yes;;DD.1, DD.2, DD.3, DD.5, DD.6;Overall architecture. ;In relation the the MissionControl runtime, a initial set of modules (coordination, execution, data_model) were derived from the design decisions (DD.1,2,3,5, and 6). Furthermore, estimating, deeco_integration and utils were creating by spliting the original modules in order to increase cohesion.;"Module DescriptionsIn the code base, the modules are found as packages (folder with __init__.py file in Python).";;;;;;;;;;;;;;;;;;;
MT.02;;Do you make modules more cohesive by redistributing responsibilities? For example, if responsibilities in a module do not serve the same purpose, they should be placed in other modules.;Yes;;DD.1, DD.2, DD.3, DD.5, DD.6;Overall architecture. ;"Many design decisions taken (expecially (DD.1,2,3,5, and 6) are in the direction of defining the responsibilities modules. In special the distribution of responsbilities between the MissionControl runtime and the extension componts (Skill Descriptor, Environment Descriptor, Skill Implementation), and between the Robots and the Coordinator.  While executing the code inspection, we elicidated some needs of refactoring in order to increase the cohesion. In special, the responsiblities of the data_model, coordinations and execution were not ideally separated. To fix this we refactored the code base. Most of the refarctoring involved moving of implementation unities and renaming of files containing this unities. ";"Module Descriptions In the code base, the modules are found as packages (folder with __init__.py file in Python). Commits with refactoring";;;;;;;;;;;;;;;;;;;
MT.03;Reduce Coupling;Do you consistently encapsulate functionality? This typically involves isolating the functionality under scrutiny and introducing an explicit interface to it.;Yes;;DD.2;"deeco_implementation estimating and coordinationg modules";The use of ensemble based systems creates an indepency between coordinator and robot. The estimate manager have a clear interface separation from the coordination module;interface files;;;;;;;;;;;;;;;;;;;
MT.04;;Do you consistently use an intermediary to keep modules from being too tightly coupled? For example, if A calls concrete functionality C, you might introduce an abstraction B that mediates between A and C.;Yes;;DD.2;" deeco_implementation module Dependency Injection (DI)";"Yes. Intermediaries are frequently used to reduce coupling: A deeco_implementation module is an intermediary that creates independency from the business logic (i.e., modules data_model, coordination, estimating, execution) and the ensembles framework (deeco). This allow the system to be ported in the future for other ensemble framework, a new version of deeco, or even to a create a version not based on ensembles. A Dependency Injection (DI) framework is used to bind comonents at runtime. The dependency injection acts as an itermediary creating independency between a consumer components and a related produced. Using dependency injection we free a consumer component from the logic of instantiating a dependency (with by it self, could have others dependencies). This create a level of independy as the dependent component can (a) be indepently modified, with new dependencies, and (b) diferent versions of the dependency can be passed to the dependent component.  We used  the lagom dependency injection framework. Following the lagom approach to DI, the classes in the framework declare their dependencies as arguments of the the contructor with type hints (a native Python feature), and does not require specific notation or calls to the lagom framework itself, i.e., the business classes in Mission Control are not dependent on the lagom framework, or any other DI.";;;;;;;;;;;;;;;;;;;;
MT.05;;Do you restrict dependencies between modules in a systematic way? Or is any system module free to interact with any other module?;Yes;;no specific DD;" Architecture documentation Overall codebase ";" data_model has no dependency outside core language features (e.g., basic data structures, enum, type hints, etc). Any module can depend on the data_model, that provides common abstractions to represent and reason about a mission. The coordination and execution modules does only depend on data_model and does not have dependencies between them. coordination module, does not depend on specific skill descriptors, nor environment descriptor services. These are bound when the components are instantiated at runtime (see MT.04).  deeco_integration depends on data_model, coordination, execution, and deeco. a init script, implementing the main method,  is used for instantiation the system in a given target configuration (i.e., with a specific selection of skills and environment descriptors). This scripts is responsible for wiring together the componenets and it depends on every other module using DI framework as a helper.";;;;;;;;;;;;;;;;;;;;
MT.06;;Do you abstract common services, in cases where you are providing several similar services? For example, this technique is often used when you want your system to be portable across operating systems, hardware, or other environmental variations.ï¿½;Yes;;DD.5, DD.6;"Skill Descriptor interface Skill Implementation interface";" The architecture is such as to minimize external dependencies. We create a deeco_integration module to create an independency between the rest of the project and the ensemble based sytem implementation. Robot behaviors are abstracted with skill descriptors and implementations Environment specifics are abstracted with Environment Descriptors. ";;;;;;;;;;;;;;;;;;;;
MT.07;Defer Binding;Does the system regularly defer binding of important functionality so that it can be replaced later in the life cycle? For example, are there plugins, addons, resource files, or configuration files that can extend the functionality of the system?;Yes;;DD.3, DD.5, DD.6;" deeco_integration SkillLibrary (execution module) SkillDescriptorRegister (coordination module)";"We defer binding in the following ways: Missions are received through a service interface, this way the coordindation is independent of the task decomposition. The only dependency is that the missions are decomposed in a tasks of a known kind.  Skill Descriptors, Environmment Descritors Services, and Skill Implementations are bind to the system at initialization (i.e., in the main method). Component wiring is executed in intialization time";;;;;;;;;;;;;;;;;;;;